---
title: "Singing activity of Yellowhammer (Emberiza citrinella): the effect of traffic noise around highways"
author: "Aneta Ritz-Radlinska"
date: "10 5 2021"
output:
  html_document:
    toc: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(lme4)
library(car)
library(ggplot2)
library(dplyr)
library(purrr)
library(tidyr)
library(MuMIn)
library(lattice)
library(MASS)
```

```{r, echo=FALSE, message=FALSE}
df <- read.table("data_syllabel.txt", header=T, sep="\t")
df <- left_join(df, read.table("data_final.txt", sep="\t", header=T) %>%
                  dplyr::select(c("code","day","singing_sunrise")), by=c("code","day"))
df <- left_join(df, read.table("data_all.txt", sep="\t", header=T) %>%
                  mutate(code=kod) %>%
                  dplyr::select(c("code","day","RPDI_do","RPDI_wd")), by=c("code","day"))
df$code <- as.factor(df$code)
df$day <- factor(df$day, levels = c(0,1), labels = c("Sunday", "Monday"))
df$loc <- factor(df$loc, levels = c(0,1), labels = c("AL", "HW"))
df$dist_road_resc <- scale(df$distance_road)
```

## 1. Locations near Highways and in Agricultural Landscape

### 1.1 Total length of singing

#### Model selection

First, let's see if we have multicollinearity:

```{r}
m1.1 <- lmer(length_sum ~ day+loc+temp+wind+humidity+pressure+cloudiness+(1|code), data=df)
vif(m1.1)
```

Obviously we do. Humidity can be largely explained by other predictors (this is expectable as weather variables are often mutually correlated). Let's remove it:

```{r}
m1.1 <- lmer(length_sum ~ day+loc+temp+wind+pressure+cloudiness+(1|code), data=df)
vif(m1.1)
```

Now we're good. Let's fit a model with all interactions:

```{r}
m1.1 <- lmerTest::lmer(length_sum ~ day*loc*(temp+wind+pressure+cloudiness)+(1|code), data=df)
Anova(m1.1)
```

We can drop all the three-fold interactions:

```{r}
m1.1 <- update(m1.1, ~.-day:loc:temp-day:loc:wind-day:loc:pressure-day:loc:cloudiness)
Anova(m1.1)
```

All interactions with day are insignificant, so we remove them:

```{r}
m1.1 <- lmer(length_sum ~ day+loc*(temp+wind+pressure+cloudiness)+(1|code), data=df)
Anova(m1.1)
```

We can further drop all interactions with locality except loc:pressure:

```{r}
m1.1 <- lmer(length_sum ~ day+loc*pressure+temp+wind+cloudiness+(1|code), data=df)
Anova(m1.1)
```

Finally, we remove highly insignificant temperature:

```{r}
m1.1 <- lmer(length_sum ~ day+loc*pressure+wind+cloudiness+(1|code), data=df)
Anova(m1.1)
```

Now we have significant locality, pressure and wind, and weakly significant day and cloudiness, and also interaction of locality and pressure.

#### Final model diagnostics and output

Diagnostic plots.
```{r}
plot(m1.1)
lattice::qqmath(m1.1)
```

Summary of the coefficient values. This table could go to an appendix, as the strength and direction of predictor effects are well described by the effect plots (see the next subsection).

```{r}
summary(m1.1)
```

Now the analogy of the traditional R<sup>2</sup>, i.e. what proportion of the singing length variability is explained by our model.

```{r}
library(rsq)
rsq(m1.1)
r.squaredGLMM(m1.1)
```

We are interested in the second value, i.e. the conditional R<sup>2</sup>, which is pretty high (maximum is 1). So good.

#### Effect plots

Let's explore the model predictions. First, just locality and day:

```{r plot1, echo=FALSE, message=FALSE}
nd <- expand.grid(day=c("Sunday", "Monday"), loc=c("AL", "HW")) %>%
  mutate(
    wind = mean(df$wind),
    pressure = mean(df$pressure),
    cloudiness = mean(df$cloudiness)
  )
mm <- model.matrix(~ day+loc*pressure+wind+cloudiness, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m1.1),
    pvar = diag(mm %*% tcrossprod(vcov(m1.1), mm))
  )
ggplot(nd, aes(x=loc, y=y, color = day)) +
  geom_point(position = position_dodge(width=.2)) +
  geom_errorbar(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), 
                width=.2, position = position_dodge(width=.2))
ggsave("yellowhammer_sumlength_locality_vs_day.png", dpi=300)
```

The version with data:

```{r, echo=FALSE, message=FALSE}
ggplot(nd, aes(x=loc, y=y, color = day)) +
  geom_point(data=df, aes(y=length_sum), position = position_dodge(width = 0.2), alpha=.3) +
  geom_point(position = position_dodge(width=.2)) +
  geom_errorbar(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), 
                width=.2, position = position_dodge(width=.2)) +
  ggsave("yellowhammer_sumlength_locality_vs_day_data.png", dpi=300)
```

Now we can add pressure (and remove day), to see its interaction with locality:

```{r, echo=FALSE, message=FALSE}
nd <- expand.grid(day=factor(c("Monday"), levels=c("Monday", "Sunday")), loc=c("AL", "HW"), 
                  pressure=seq(min(df$pressure), max(df$pressure), length.out=100)) %>%
  mutate(
    wind = mean(df$wind),
    cloudiness = mean(df$cloudiness)
  )
mm <- model.matrix(~ day+loc*pressure+wind+cloudiness, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m1.1),
    pvar = diag(mm %*% tcrossprod(vcov(m1.1), mm))
  )
ggplot(nd, aes(x=pressure, y=y)) +
  geom_line(aes(color=loc)) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar), fill=loc), alpha=.3)
ggsave("yellowhammer_sumlength_locality_vs_pressure.png", dpi=300)
```

Again, with data:

```{r, echo=FALSE, message=FALSE}
ggplot(nd, aes(x=pressure, y=y)) +
  geom_point(data=df, aes(y=length_sum, color=loc), alpha=.3) +
  geom_line(aes(color=loc)) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar), fill=loc), alpha=.3) +
  ggsave("yellowhammer_sumlength_locality_vs_pressure_data.png", dpi=300)

```

Prediction plot for wind (plus locality):

```{r, echo=FALSE, message=FALSE}
nd <- expand.grid(day=factor(c("Monday"), levels=c("Monday", "Sunday")), 
                  loc=factor(c("AL", "HW"), levels=c("AL", "HW")), 
                  wind=seq(min(df$wind), max(df$wind), length.out=100)) %>%
  mutate(
    pressure = mean(df$pressure),
    cloudiness = mean(df$cloudiness)
  )
mm <- model.matrix(~ day+loc*pressure+wind+cloudiness, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m1.1),
    pvar = diag(mm %*% tcrossprod(vcov(m1.1), mm))
  )
ggplot(nd, aes(x=wind, y=y)) +
  geom_line(aes(color=loc)) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar), fill=loc), alpha=.3) +
  ggsave("yellowhammer_sumlength_locality_vs_wind.png", dpi=300)
```

And with data:

```{r, echo=FALSE, message=FALSE}
ggplot(nd, aes(x=wind, y=y)) +
  geom_line(aes(color=loc)) +
  geom_point(data=df, aes(y=length_sum, color=loc), alpha=.3) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar), fill=loc), alpha=.3) +
  ggsave("yellowhammer_sumlength_locality_vs_wind_data.png", dpi=300)
```

### 1.2 Mean length of singing

#### Model selection

Let's fit a model with all interactions:

```{r}
m1.2 <- lmer(length_mean ~ day*loc*(temp+wind+pressure+cloudiness)+(1|code), data=df)
Anova(m1.2)
```

We can drop all the three-fold interactions:

```{r}
m1.2 <- update(m1.2, ~.-day:loc:temp-day:loc:wind-day:loc:pressure-day:loc:cloudiness)
Anova(m1.2)
```

All interactions with day are insignificant, so we remove them, except the weakly significant interaction of locality and day:

```{r}
m1.2 <- lmer(length_mean ~ day+loc*(temp+wind+pressure+cloudiness)+day:loc+(1|code), data=df)
Anova(m1.2)
```

Because of the significant interactions, we cannot further reduce the model. So this is our final one.

#### Final model diagnostics and outputs

Diagnostic plots.
```{r}
plot(m1.2)
qqmath(m1.2)
```

Summary of the coefficient values.

```{r}
summary(m1.2)
```

Conditional R<sup>2</sup>:

```{r}
r.squaredGLMM(m1.2)
```

Not bad.

#### Effect plots

Let's explore the model predictions. First, just locality and day:

```{r, echo=FALSE, message=FALSE}
nd <- expand.grid(day=c("Sunday", "Monday"), loc=c("AL", "HW")) %>%
  mutate(
    wind = mean(df$wind),
    pressure = mean(df$pressure),
    cloudiness = mean(df$cloudiness),
    temp = mean(df$temp)
  )
mm <- model.matrix(~ day+loc*(temp+wind+pressure+cloudiness)+day:loc, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m1.2),
    pvar = diag(mm %*% tcrossprod(vcov(m1.2), mm))
  )
ggplot(nd, aes(x=loc, y=y, color = day)) +
  geom_point(position = position_dodge(width=.2)) +
  geom_errorbar(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), 
                width=.2, position = position_dodge(width=.2)) +
  labs(x="", y="Mean syllabus duration (sec)") +
  ggsave("yellowhammer_meanlength_locality_vs_day.png", dpi=300)
```

The version with data:

```{r, echo=FALSE, message=FALSE}
ggplot(nd, aes(x=loc, y=y, color = day)) +
  geom_point(data=df, aes(y=length_mean), position = position_dodge(width = 0.2), alpha=.3) +
  geom_point(position = position_dodge(width=.2)) +
  geom_errorbar(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), 
                width=.2, position = position_dodge(width=.2)) +
  labs(x="", y="Mean syllabus duration (sec)") +
  ggsave("yellowhammer_sumlength_locality_vs_day_data.png", dpi=300)
```

Now the interactions of weather and locality:

```{r, echo=FALSE, message=FALSE}
nd.wind <- expand.grid(day=factor(c("Monday"), levels=c("Monday", "Sunday")), 
                       loc=c("AL", "HW"), 
                       wind=seq(min(df$wind), max(df$wind), length.out=100)) %>%
  mutate(
    temp = mean(df$temp),
    cloudiness = mean(df$cloudiness),
    pressure = mean(df$pressure)
  )
mm <- model.matrix(~ day+loc*(temp+wind+pressure+cloudiness)+day:loc, nd.wind)
nd.wind <- nd.wind %>%
  mutate(
    y = mm %*% fixef(m1.2),
    pvar = diag(mm %*% tcrossprod(vcov(m1.2), mm)),
    variable="wind",
    x = wind
  )
nd.temp <- expand.grid(day=factor(c("Monday"), levels=c("Monday", "Sunday")), 
                       loc=c("AL", "HW"), 
                       temp=seq(min(df$temp), max(df$temp), length.out=100)) %>%
  mutate(
    wind = mean(df$wind),
    cloudiness = mean(df$cloudiness),
    pressure = mean(df$pressure)
  )
mm <- model.matrix(~ day+loc*(temp+wind+pressure+cloudiness)+day:loc, nd.temp)
nd.temp <- nd.temp %>%
  mutate(
    y = mm %*% fixef(m1.2),
    pvar = diag(mm %*% tcrossprod(vcov(m1.2), mm)),
    variable="temp",
    x=temp
  )
nd.pressure <- expand.grid(day=factor(c("Monday"), levels=c("Monday", "Sunday")), 
                       loc=c("AL", "HW"), 
                       pressure=seq(min(df$pressure), max(df$pressure), length.out=100)) %>%
  mutate(
    temp = mean(df$temp),
    cloudiness = mean(df$cloudiness),
    wind = mean(df$wind)
  )
mm <- model.matrix(~ day+loc*(temp+wind+pressure+cloudiness)+day:loc, nd.pressure)
nd.pressure <- nd.pressure %>%
  mutate(
    y = mm %*% fixef(m1.2),
    pvar = diag(mm %*% tcrossprod(vcov(m1.2), mm)),
    variable="pressure",
    x=pressure
  )
nd.cloudiness <- expand.grid(day=factor(c("Monday"), levels=c("Monday", "Sunday")), 
                       loc=c("AL", "HW"), 
                       cloudiness=seq(min(df$cloudiness), max(df$cloudiness), length.out=100)) %>%
  mutate(
    temp = mean(df$temp),
    wind = mean(df$wind),
    pressure = mean(df$pressure)
  )
mm <- model.matrix(~ day+loc*(temp+wind+pressure+cloudiness)+day:loc, nd.cloudiness)
nd.cloudiness <- nd.cloudiness %>%
  mutate(
    y = mm %*% fixef(m1.2),
    pvar = diag(mm %*% tcrossprod(vcov(m1.2), mm)),
    variable="cloudiness",
    x=cloudiness
  )
nd <- rbind(
  nd.wind,
  nd.temp,
  nd.pressure,
  nd.cloudiness
)
ggplot(nd, aes(x=x, y=y)) +
  geom_line(aes(color=loc)) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar), fill=loc), alpha=.3) +
  facet_wrap(~variable, scales = "free_x") +
  labs(x="", y="Mean syllabus duration (sec)") +
  ggsave("yellowhammer_meanlength_locality_vs_weather.png", dpi=300)
```

Version with data not included.

### 1.3 Number of songs

#### Model selection

Let's fit a model with all interactions:

```{r}
m1.3 <- lmer(syll_sum ~ day*loc*(temp+wind+pressure+cloudiness)+(1|code), data=df)
Anova(m1.3)
```

We can drop all the three-fold interactions:

```{r}
m1.3 <- update(m1.3, ~.-day:loc:temp-day:loc:wind-day:loc:pressure-day:loc:cloudiness)
Anova(m1.3)
```

All interactions with day are insignificant, so we remove them:

```{r}
m1.3 <- lmer(syll_sum ~ day+loc*(temp+wind+pressure+cloudiness)+(1|code), data=df)
Anova(m1.3)
```

We can further drop interactions with locality and wind and cloudiness:

```{r}
m1.3 <- lmer(syll_sum ~ day+loc*(pressure+temp)+wind+cloudiness+(1|code), data=df)
Anova(m1.3)
```

We can further exclude cloudiness:

```{r}
m1.3 <- lmer(syll_sum ~ day+loc*(pressure+temp)+wind+(1|code), data=df)
Anova(m1.3)
```

Most important is locality, in interaction with pressure. Few other predictors are weakly significant.

#### Final model diagnostics and outputs

Diagnostic plots:
```{r}
plot(m1.3)
qqmath(m1.3)
```


Summary of the coefficient values:

```{r}
summary(m1.3)
```

Conditional R<sup>2</sup>:

```{r}
r.squaredGLMM(m1.3)
```

Pretty good.

#### Effect plots

I would only focus on significant predictors, so the interaction between locality and pressure:

```{r, echo=FALSE, message=FALSE}
nd <- expand.grid(day=factor(c("Monday"), levels=c("Monday", "Sunday")), loc=c("AL", "HW"), 
                  pressure=seq(min(df$pressure), max(df$pressure), length.out=100)) %>%
  mutate(
    wind = mean(df$wind),
    temp = mean(df$temp)
  )
mm <- model.matrix(~ day+loc*(pressure+temp)+wind, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m1.3),
    pvar = diag(mm %*% tcrossprod(vcov(m1.3), mm))
  )
ggplot(nd, aes(x=pressure, y=y)) +
  geom_line(aes(color=loc)) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar), fill=loc), alpha=.3) +
  labs(x="Air pressure", y="Number of syllabi") +
  ggsave("yellowhammer_sumsyll_locality_vs_pressure.png", dpi=300)
```

Again, with data:

```{r, echo=FALSE, message=FALSE}
ggplot(nd, aes(x=pressure, y=y)) +
  geom_point(data=df, aes(y=syll_sum, color=loc), alpha=.3) +
  geom_line(aes(color=loc)) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar), fill=loc), alpha=.3) +
  labs(x="Air pressure", y="Number of syllabi") +
  ggsave("yellowhammer_sumsyll_locality_vs_pressure_data.png", dpi=300)

```

### 1.4 Start of singing

#### Model selection

Beacause we have exactly same predictors as in the first section, we can skip the collinearity check and exclude humidity. So we start with interactions:

```{r}
m1.4 <- lmer(singing_sunrise ~ day*loc*(temp+wind+pressure+cloudiness)+(1|code), data=df)
Anova(m1.4)
```

We can drop all the three-fold interactions:

```{r}
m1.4 <- update(m1.4, ~.-day:loc:temp-day:loc:wind-day:loc:pressure-day:loc:cloudiness)
Anova(m1.4)
```

Removing day:temp:

```{r}
m1.4 <- update(m1.4, ~.-day:temp)
Anova(m1.4)
```

Removing loc:wind:

```{r}
m1.4 <- update(m1.4, ~.-loc:wind)
Anova(m1.4)
```

Removing loc:cloudiness:

```{r}
m1.4 <- update(m1.4, ~.-loc:cloudiness)
Anova(m1.4)
```

#### Final model outputs

Diagnostic plots:
```{r}
plot(m1.4)
qqmath(m1.4)
```

```{r}
summary(m1.4)
```

```{r}
r.squaredGLMM(m1.4)
```

Wow.

#### Effect plots

The weather predictors in interaction with locality and day:

```{r, echo=FALSE, message=FALSE, warning=FALSE}
nd.pressure <- expand.grid(
  loc=c("AL", "HW"), 
  day=c("Sunday", "Monday"),
  pressure=seq(min(df$pressure), max(df$pressure), length.out=100)
) %>%
  mutate(
    wind = mean(df$wind),
    cloudiness = mean(df$cloudiness),
    temp = mean(df$temp),
    x = pressure,
    variable = "Air pressure"
  )
nd.temp <- expand.grid(
  loc=c("AL", "HW"), 
  day=c("Sunday", "Monday"),
  temp=seq(min(df$temp), max(df$temp), length.out=100)
) %>%
  mutate(
    wind = mean(df$wind),
    cloudiness = mean(df$cloudiness),
    pressure = mean(df$pressure),
    x = temp,
    variable = "Temperature"
  )
nd.cloudiness <- expand.grid(
  loc=c("AL", "HW"), 
  day=c("Sunday", "Monday"),
  cloudiness=seq(min(df$cloudiness), max(df$cloudiness), length.out=100)
) %>%
  mutate(
    wind = mean(df$wind),
    pressure = mean(df$pressure),
    temp = mean(df$temp),
    x = cloudiness,
    variable = "Cloudiness"
  )
nd.wind <- expand.grid(
  loc=c("AL", "HW"), 
  day=c("Sunday", "Monday"),
  wind=seq(min(df$wind), max(df$wind), length.out=100)
) %>%
  mutate(
    pressure = mean(df$pressure),
    temp = mean(df$temp),
    cloudiness = mean(df$cloudiness),
    x = wind,
    variable = "Wind speed"
  )
nd <- list(nd.wind, nd.temp, nd.pressure, nd.cloudiness) %>%
  bind_rows()
mm <- model.matrix(~ day + loc + temp + wind + pressure + cloudiness +  
    day:loc + day:wind + day:pressure + day:cloudiness +  
    loc:temp + loc:pressure, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m1.4),
    pvar = diag(mm %*% tcrossprod(vcov(m1.4), mm))
  )
ggplot(nd, aes(x=x, y=y)) +
  geom_line(aes(color=day)) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar), fill=day), alpha=.3) +
  facet_grid(loc~variable, scales = "free_x")
ggsave("yellowhammer_meanlength_locality_vs_weather.png", dpi=300)

dff <- list(
  df %>% mutate(x=wind, variable="Wind speed"),
  df %>% mutate(x=temp, variable="Temperature"),
  df %>% mutate(x=cloudiness, variable="Cloudiness"),
  df %>% mutate(x=pressure, variable="Air pressure")
) %>%
  bind_rows()
ggplot(nd, aes(x=x, y=y)) +
  geom_line(aes(color=loc)) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar), fill=loc), alpha=.3) +
  geom_point(data=dff, aes(y=singing_sunrise, color=loc), alpha=.3) +
  facet_grid(day~variable, scales = "free_x")
```

And with data:

```{r, echo=FALSE, message=FALSE, warning=FALSE}
dff <- list(
  df %>% mutate(x=wind, variable="Wind speed"),
  df %>% mutate(x=temp, variable="Temperature"),
  df %>% mutate(x=cloudiness, variable="Cloudiness"),
  df %>% mutate(x=pressure, variable="Air pressure")
) %>%
  bind_rows()
ggplot(nd, aes(x=x, y=y)) +
  geom_line(aes(color=day)) +
  geom_point(data=dff, aes(y=singing_sunrise, color=day), alpha=.3) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar), fill=day), alpha=.3) +
  facet_grid(loc~variable, scales = "free_x") +
  ggsave("yellowhammer_meanlength_locality_vs_weather_data.png", dpi=300)
```

## 2. Aricultural Landscape - distance from roads

### 2.1 Total length of singing

#### Model selection

Let's check for multicollinearity:

```{r}
m2.1 <- lmer(length_sum~day+dist_road_resc+temp+wind+humidity+pressure+cloudiness+(1|code),
          data=df[df$loc=="AL",])
vif(m2.1)
```

As previously, humidity should be kicked out.

```{r}
m2.1 <- lmer(length_sum~day+dist_road_resc+temp+wind+pressure+cloudiness+(1|code),
          data=df[df$loc=="AL",])
vif(m2.1)
```

Now we're good. Let's start with model with all interactions:

```{r}
m2.1 <- lmer(length_sum~day*(dist_road_resc+temp+wind+pressure+cloudiness)+(1|code),
          data=df[df$loc=="AL",])
Anova(m2)
```

We can drop all interactions:

```{r}
m2.1 <- lmer(length_sum~day+dist_road_resc+temp+wind+pressure+cloudiness+(1|code),
          data=df[df$loc=="AL",])
Anova(m2.1)
```

We remove insignificant temp, day, and cloudiness. Here's the final model:

```{r}
m2.1 <- lmer(length_sum~dist_road_resc+wind+pressure+(1|code),
          data=df[df$loc=="AL",])
Anova(m2.1)
```

#### Final Model diagnostics and outputs

```{r}
plot(m2.1)
qqmath(m2.1)
```


```{r}
summary(m2.1)
```

```{r}
r.squaredGLMM(m2.1)
```

Again, nice R<sup>2</sup>.

#### Effect plots

I would report here only the distance to road predictor, because both wind and pressure are already presented in the previous section.

Without data:

```{r, echo=FALSE, message=FALSE}
dr_mn <- mean(df$distance_road)
dr_sd <- sd(df$distance_road)
nd <-data.frame(
  dist_road_resc=seq(
    (0.95*min(df$distance_road)-dr_mn)/dr_sd, 
    (1.05*max(df$distance_road)-dr_mn)/dr_sd,
    length.out = 100
    ),
    pressure = mean(df$pressure),
    wind = mean(df$wind)
  )
mm <- model.matrix(~dist_road_resc+wind+pressure, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m2.1),
    pvar = diag(mm %*% tcrossprod(vcov(m2.1), mm))
  )
ggplot(nd, aes(x=dist_road_resc*dr_sd + dr_mn, y=y)) +
  geom_line() +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), alpha=.3) +
  labs(x="Distance to nearest road (m)") +
  ggsave("yellowhammer_sumlength_dist_road.png", dpi=300)
```

With data:

```{r, echo=FALSE, message=FALSE}
ggplot(nd, aes(x=dist_road_resc*dr_sd + dr_mn, y=y)) +
  geom_line() +
  geom_point(data=df[df$loc=="AL",], aes(y=length_sum), alpha=.3) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), alpha=.3) +
  labs(x="Distance to nearest road (m)") +
  ggsave("yellowhammer_sumlength_dist_road_data.png", dpi=300)
```

### 2.2 Mean length of singing

#### Model selection

Let's start with model with all interactions:

```{r}
m2.2 <- lmer(length_mean~day*(dist_road_resc+temp+wind+pressure+cloudiness)+(1|code),
          data=df[df$loc=="AL",])
Anova(m2.2)
```

We can drop all interactions:

```{r}
m2.2 <- lmer(length_mean~day+dist_road_resc+temp+wind+pressure+cloudiness+(1|code),
          data=df[df$loc=="AL",])
Anova(m2.2)
```

Nothing.

### 2.3 Number of songs

#### Model selecion

Let's start with model with all interactions:

```{r}
m2.3 <- lmer(syll_sum~day*(dist_road_resc+temp+wind+pressure+cloudiness)+(1|code),
          data=df[df$loc=="AL",])
Anova(m2.3)
```

We can drop all interactions:

```{r}
m2.3 <- lmer(syll_sum~day+dist_road_resc+temp+wind+pressure+cloudiness+(1|code),
          data=df[df$loc=="AL",])
Anova(m2.3)
```

We remove insignificant temp, day, and cloudiness. Here's the final model:

```{r}
m2.3 <- lmer(syll_sum~dist_road_resc+wind+pressure+(1|code),
          data=df[df$loc=="AL",])
Anova(m2.3)
```

#### Final Model outputs

Diagnostic plots:
```{r}
plot(m2.3)
qqmath(m2.3)
```

```{r}
summary(m2.3)
```

```{r}
r.squaredGLMM(m2.3)
```

Again, nice R<sup>2</sup>.

#### Effect plots

I would report here only the distance to road predictor, because both wind and pressure are already presented in the previous section.

Without data:

```{r, echo=FALSE, message=FALSE}
dr_mn <- mean(df$distance_road)
dr_sd <- sd(df$distance_road)
nd <-data.frame(
  dist_road_resc=seq(
    (0.95*min(df$distance_road)-dr_mn)/dr_sd, 
    (1.05*max(df$distance_road)-dr_mn)/dr_sd,
    length.out = 100
    ),
    pressure = mean(df$pressure),
    wind = mean(df$wind)
  )
mm <- model.matrix(~dist_road_resc+wind+pressure, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m2.3),
    pvar = diag(mm %*% tcrossprod(vcov(m2.3), mm))
  )
ggplot(nd, aes(x=dist_road_resc*dr_sd + dr_mn, y=y)) +
  geom_line() +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), alpha=.3) +
  labs(x="Distance to nearest road (m)", y="Number of syllabi") +
  ggsave("yellowhammer_sumsyll_dist_road.png", dpi=300)
```

With data:

```{r, echo=FALSE, message=FALSE}
ggplot(nd, aes(x=dist_road_resc*dr_sd + dr_mn, y=y)) +
  geom_line() +
  geom_point(data=df, aes(y=syll_sum), alpha=.3) +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), alpha=.3) +
  labs(x="Distance to nearest road (m)", y="Number of syllabi") +
  ggsave("yellowhammer_sumsyll_dist_road_data.png", dpi=300)
```

### 2.4 Start of singing

#### Model selecion

Let's start with model with all interactions:

```{r}
m2.4 <- lmer(singing_sunrise~day*(dist_road_resc+temp+wind+pressure+cloudiness)+(1|code),
           data=df[df$loc=="AL",])
Anova(m2.4)
```

Let's drop insignificant interactions:

```{r}
m2.4 <- update(m2.4, ~.-day:dist_road_resc-day:temp)
Anova(m2.4)
```

Distance to road is not significant.

## 3. Influence of Traffic Noise - localities near Highways only

```{r, echo=FALSE, message=FALSE}
# Highway localities only
df.dopr <- df[df$loc == "HW",]

# vehicle count per day (Workdays/Weekend)
df.dopr$RPDI2 <- df.dopr$RPDI_do
df.dopr$RPDI2[df.dopr$day == "Monday"] <- df.dopr$RPDI_wd[df.dopr$day == "Monday"]
df.dopr$RPDI2sc <- scale(df.dopr$RPDI2)
```

### 3.1 Total length of singing

#### Model selection

First, let's see if we have multicollinearity:

```{r}
m3.1 <- lmer(length_sum ~ vehicle+RPDI2sc+temp+wind+humidity+pressure+cloudiness+(1|code),
          data=df.dopr)
vif(m3.1)
```

Humidity goes out:

```{r}
m3.1 <- lmer(length_sum ~ vehicle+RPDI2sc+temp+wind+pressure+cloudiness+(1|code),
          data=df.dopr)
vif(m3.1)
```

```{r}
Anova(m3.1)
```

Pressure out:

```{r}
m3.1 <- lmer(length_sum ~ vehicle+RPDI2sc+temp+wind+cloudiness+(1|code),
          data=df.dopr)
Anova(m3.1)
```
Vehicle out:

```{r}
m3.1 <- lmer(length_sum ~ RPDI2sc+temp+wind+cloudiness+(1|code),
          data=df.dopr)
Anova(m3.1)
```

Cloudiness out:

```{r}
m3.1 <- lmer(length_sum ~ RPDI2sc+temp+wind+(1|code), data=df.dopr)
Anova(m3.1)
```

#### Final model diagnostics and outputs

Diagnostic plots:
```{r}
plot(m3.1)
qqmath(m3.1)
```

```{r}
summary(m3.1)
```

```{r}
r.squaredGLMM(m3.1)
```

#### Effect plots

```{r, echo=FALSE, message=FALSE}
nd <- data.frame(RPDI2sc = seq(-2,3,0.01),
                 temp = mean(df.dopr$temp),
                 wind = mean(df.dopr$wind))
mm <- model.matrix(~ RPDI2sc+temp+wind, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m3.1),
    pvar = diag(mm %*% tcrossprod(vcov(m3.1), mm)),
    x = RPDI2sc*sd(df.dopr$RPDI2) + mean(df.dopr$RPDI2)
  )
ggplot(nd, aes(x=x, y=y)) +
  geom_line() +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), alpha=.3) +
  geom_point(data=df.dopr, aes(x=RPDI2, y=length_sum), alpha=.3) +
  labs(x="RPDI", y="Length of singing (min)") +
  ggsave("yellowhammer_sumlength_RPDI_data.png", dpi=300)
```

### 3.2 Mean length of singing

#### Model selection

```{r}
m3.2 <- lmer(length_mean ~ vehicle+RPDI2sc+temp+wind+pressure+cloudiness+(1|code),
          data=df.dopr)
Anova(m3.2)
```
RPDI out:

```{r}
m3.2 <- lmer(length_mean ~ vehicle+temp+wind+pressure+cloudiness+(1|code),
          data=df.dopr)
Anova(m3.2)
```

Vehicle significant!

#### Final model diagnostics and outputs

Diagnostic plots:
```{r}
plot(m3.2)
qqmath(m3.2)
```

```{r}
summary(m3.2)
```

```{r}
r.squaredGLMM(m3.2)
```
Relatively good.

#### Effect plots

```{r, echo=FALSE, message=FALSE}
nd <- data.frame(vehicle = seq(min(df.dopr$vehicle),max(df.dopr$vehicle),length.out=100),
                 temp = mean(df.dopr$temp),
                 wind = mean(df.dopr$wind),
                 pressure = mean(df.dopr$pressure),
                 cloudiness = mean(df.dopr$cloudiness))
mm <- model.matrix(~ vehicle+temp+wind+pressure+cloudiness, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m3.2),
    pvar = diag(mm %*% tcrossprod(vcov(m3.2), mm)),
    x = vehicle
  )
ggplot(nd, aes(x=x, y=y)) +
  geom_line() +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), alpha=.3) +
  geom_point(data=df.dopr, aes(x=vehicle, y=length_mean), alpha=.3) +
  labs(x="Vehicle", y="Mean syllabus duration (sec)") +
  ggsave("yellowhammer_meanlength_vehicle_data.png", dpi=300)
```

### 3.3 Number of songs

#### Model selection

Intial model:

```{r}
m3.3 <- lmer(syll_sum ~ vehicle+RPDI2sc+temp+wind+pressure+cloudiness+(1|code),
          data=df.dopr)
Anova(m3.3)
```

Pressure out:

```{r}
m3.3 <- lmer(syll_sum ~ vehicle+RPDI2sc+temp+wind+cloudiness+(1|code),
          data=df.dopr)
Anova(m3.3)
```

Vehicle out:

```{r}
m3.3 <- lmer(syll_sum ~ RPDI2sc+temp+wind+cloudiness+(1|code), data=df.dopr)
Anova(m3.3)
```

Cloudiness out:

```{r}
m3.3 <- lmer(syll_sum ~ RPDI2sc+temp+wind+(1|code), data=df.dopr)
Anova(m3.3)
```

Wind out:

```{r}
m3.3 <- lmer(syll_sum ~ RPDI2sc+temp+(1|code), data=df.dopr)
Anova(m3.3)
```

#### Final model diagnostics and outputs

Diagnostic plots:
```{r}
plot(m3.3)
qqmath(m3.3)
```

```{r}
summary(m3.3)
```

```{r}
r.squaredGLMM(m3.3)
```

#### Effect plots

```{r, echo=FALSE, message=FALSE}
nd <- data.frame(RPDI2sc = seq(-2,3,0.01),
                 temp = mean(df.dopr$temp))
mm <- model.matrix(~ RPDI2sc+temp, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m3.3),
    pvar = diag(mm %*% tcrossprod(vcov(m3.3), mm)),
    x = RPDI2sc*sd(df.dopr$RPDI2) + mean(df.dopr$RPDI2)
  )
ggplot(nd, aes(x=x, y=y)) +
  geom_line() +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), alpha=.3) +
  geom_point(data=df.dopr, aes(x=RPDI2, y=syll_sum), alpha=.3) +
  labs(x="RPDI", y="Number of syllabi") +
  ggsave("yellowhammer_sumsyll_RPDI_data.png", dpi=300)
```

### 3.4 Start of singing

#### Model selection

Initial model:

```{r}
m3.4 <- lmer(singing_sunrise ~ vehicle+RPDI2sc+temp+wind+pressure+cloudiness+(1|code),
          data=df.dopr)
Anova(m3.4)
```

Temperature out:

```{r}
m3.4 <- lmer(singing_sunrise ~ vehicle+RPDI2sc+pressure+wind+cloudiness+(1|code),
          data=df.dopr)
Anova(m3.4)
```

RPDI out:

```{r}
m3.4 <- lmer(singing_sunrise ~ vehicle+pressure+wind+cloudiness+(1|code),
          data=df.dopr)
Anova(m3.4)
```

Vehicle significant!

#### Final model diagnostics and outputs

Diagnostic plots:
```{r}
plot(m3.4)
qqmath(m3.4)
```

```{r}
summary(m3.4)
```

```{r}
r.squaredGLMM(m3.4)
```

#### Effect plots

```{r, echo=FALSE, message=FALSE}
nd <- data.frame(vehicle = seq(min(df.dopr$vehicle),max(df.dopr$vehicle),length.out=100),
                 temp = mean(df.dopr$temp),
                 wind = mean(df.dopr$wind),
                 pressure = mean(df.dopr$pressure),
                 cloudiness = mean(df.dopr$cloudiness))
mm <- model.matrix(~ vehicle+pressure+wind+cloudiness, nd)
nd <- nd %>%
  mutate(
    y = mm %*% fixef(m3.4),
    pvar = diag(mm %*% tcrossprod(vcov(m3.4), mm)),
    x = vehicle
  )
ggplot(nd, aes(x=x, y=y)) +
  geom_line() +
  geom_ribbon(aes(ymin=y-1.96*sqrt(pvar), ymax=y+1.96*sqrt(pvar)), alpha=.3) +
  geom_point(data=df.dopr, aes(x=vehicle, y=singing_sunrise), alpha=.3) +
  labs(x="vehicle", y="Start of singing before sunrise (min)") +
  ggsave("yellowhammer_sumlength_RPDI_data.png", dpi=300)
```
